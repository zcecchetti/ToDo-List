(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>d});var r=n(537),a=n.n(r),i=n(645),o=n.n(i)()(a());o.push([t.id,":root {\n\n    font-size: 16px;\n    font-family: 'Gill Sans', 'Gill Sans MT', 'Calibri', 'Trebuchet MS', sans-serif;\n    color: #4d4d4d;\n    background-color: #f5f7f9;\n}\n\nbody {\n\n    margin: 0;\n    display: grid;\n    grid-template-columns: 18.75rem 1fr;\n    grid-template-rows: 100px minmax(calc(100vh - 120px), 1fr) 20px;\n}\n\n#header {\n\n    color: #4d4d4d;\n    display: flex;\n    flex-direction: column;\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n    justify-content: center;\n    align-items: center;\n    box-shadow: 0 0 5px #4d4d4d;\n}\n\n#sidebar {\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    border-right: #4d4d4d solid 2px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 8px 0;\n    gap: 8px;\n}\n\n#content {\n\n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n}\n\n#footer {\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: .75rem;\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n}\n\n#pageTitle {\n\n    font-size: 3rem;\n}\n\n#sidebarDescription {\n\n    font-size: 2rem;\n    border-bottom: #4d4d4d solid 2px;\n}\n\n#addProjectButton, #addTaskButton, #submitTaskButton, #removeTaskButton {\n\n    display: flex;\n    height: 1.5rem;\n    width: 9rem;\n    border-radius: .75rem;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#addProjectButton, #tabHeader {\n\n    margin: 0 3rem;\n}\n\n#addProjectButton:hover {\n\n    background-color: #e3e3e3;\n}\n\n#addProjectButton:active {\n\n    border: black solid 2px;\n    color: black;\n}\n\n#addTaskButton:hover {\n\n    background-color: #e3e3e3;\n}\n\n#addTaskButton:active {\n\n    border: black solid 2px;\n    color: black;\n}\n\n#submitTaskButton:hover {\n\n    background-color: #e3e3e3;\n}\n\n#submitTaskButton:active {\n\n    border: black solid 2px;\n    color: black;\n}\n\n#sideBarActions {\n\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    justify-content: flex-start;\n    gap: 8px;\n}\n\n#sidebarContainer {\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.25rem;\n    gap: 8px;\n}\n\n#sidebarContainer>button {\n\n    height: 1.5rem;\n    width: 15rem;\n    background-color: #f2f6ff;\n    border: #4d4d4d solid 2px;\n    color: #4d4d4d;\n}\n\n#sidebarContainer>button:hover {\n\n    background-color: #e3e3e3;\n}\n\n#sidebarContainer>button:active {\n\n    border: black solid 2px;\n    color: black;\n}\n\n#taskTab {\n\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n#tabHeader {\n\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    padding: 8px;\n    border: 2px solid transparent;\n    background-image: linear-gradient(to right, transparent, transparent), linear-gradient(to bottom, transparent, transparent), linear-gradient(to left, #f5f7f9, #4d4d4d), linear-gradient(to bottom, transparent, transparent);\n    background-origin: border-box;\n    background-size: 100% 2px, 2px 100%, 100% 2px, 2px 100%;\n    background-position: top left, top right, bottom right, bottom left;\n    background-repeat: no-repeat;\n}\n\n#taskContainer {\n\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n}\n\n.taskBox {\n\n    display: grid;\n    grid-template-columns: 1fr 12rem 9rem;\n    grid-template-rows: 2.5rem 1fr;\n    margin: 0 3rem;\n    padding: 8px 8px;\n    border: 2px solid transparent;\n    background-image: linear-gradient(to right, #f5f7f9, #f5f7f9), linear-gradient(to bottom, #f5f7f9, #f5f7f9), linear-gradient(to left, #f5f7f9, #4d4d4d), linear-gradient(to bottom, #f5f7f9, #f5f7f9);\n    background-origin: border-box;\n    background-size: 100% 2px, 2px 100%, 100% 2px, 2px 100%;\n    background-position: top left, top right, bottom right, bottom left;\n    background-repeat: no-repeat;\n    gap: 8px;\n}\n\n.taskBox:hover {\n\n    background-color: #d8dde2;\n}\n\n#listName {\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 2.5rem;\n}\n\n.taskTitle {\n\n    font-size: 2rem;\n    grid-column: 1 / 2;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-end;\n}\n\n.taskSummary {\n    \n    font-size: 1.5rem;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-start;\n    grid-column: 1 / 4;\n    grid-row: 2 / 3;\n    overflow: hidden;\n    border: #4d4d4d solid 2px;\n    padding: 4px 8px;\n    height: 2rem;\n}\n\n.fullSummary {\n    \n    font-size: 1.5rem;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-start;\n    grid-column: 1 / 4;\n    grid-row: 2 / 3;\n    border: #4d4d4d solid 2px;\n    padding: 4px 8px;\n}\n\n.taskPriority {\n\n    grid-column: 3 / 4;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n}\n\n.dueDate {\n\n    display: flex;\n    grid-column: 2 / 3;\n    grid-row: 1 / 2;\n    justify-content: flex-end;\n    align-items: flex-end;\n}\n\n#userGreeting {\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 5rem;\n    height: calc(100vh - 250px);\n}\n\n#projectName {\n\n    box-sizing: border-box;\n    height: 1.5rem;\n    width: 15rem;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#taskForm {\n\n    display: grid;\n    grid-template-columns: 50% 1fr 4.5rem 9rem 4.5rem 9rem;\n    grid-template-rows: 2.5rem 1fr;\n    gap: 8px;\n    padding: 1rem 3rem;\n}\n\n#inputName {\n\n    grid-column: 1 / 2;\n    grid-row: 1 / 2;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#labelDue {\n\n    grid-column: 3 / 4;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n}\n\n#inputDue {\n\n    grid-column: 4 / 5;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#labelPriority {\n\n    grid-column: 5 / 6;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n}\n\n#inputPriority {\n\n    grid-column: 6 / 7;\n    grid-row: 1 / 2;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#priorityLevels {\n\n    grid-column: 6 / 7;\n    grid-row: 1 / 2;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#inputSummary {\n\n    grid-column: 1 / 7;\n    grid-row: 2 / 3;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n    height: clamp(15rem, 50vh, 35rem);\n}\n\ntextarea {\n\n    resize: none;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[":root {\n\n    font-size: 16px;\n    font-family: 'Gill Sans', 'Gill Sans MT', 'Calibri', 'Trebuchet MS', sans-serif;\n    color: #4d4d4d;\n    background-color: #f5f7f9;\n}\n\nbody {\n\n    margin: 0;\n    display: grid;\n    grid-template-columns: 18.75rem 1fr;\n    grid-template-rows: 100px minmax(calc(100vh - 120px), 1fr) 20px;\n}\n\n#header {\n\n    color: #4d4d4d;\n    display: flex;\n    flex-direction: column;\n    grid-column: 1 / 3;\n    grid-row: 1 / 2;\n    justify-content: center;\n    align-items: center;\n    box-shadow: 0 0 5px #4d4d4d;\n}\n\n#sidebar {\n\n    grid-column: 1 / 2;\n    grid-row: 2 / 3;\n    border-right: #4d4d4d solid 2px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    padding: 8px 0;\n    gap: 8px;\n}\n\n#content {\n\n    grid-column: 2 / 3;\n    grid-row: 2 / 3;\n}\n\n#footer {\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: .75rem;\n    grid-column: 1 / 3;\n    grid-row: 3 / 4;\n}\n\n#pageTitle {\n\n    font-size: 3rem;\n}\n\n#sidebarDescription {\n\n    font-size: 2rem;\n    border-bottom: #4d4d4d solid 2px;\n}\n\n#addProjectButton, #addTaskButton, #submitTaskButton, #removeTaskButton {\n\n    display: flex;\n    height: 1.5rem;\n    width: 9rem;\n    border-radius: .75rem;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#addProjectButton, #tabHeader {\n\n    margin: 0 3rem;\n}\n\n#addProjectButton:hover {\n\n    background-color: #e3e3e3;\n}\n\n#addProjectButton:active {\n\n    border: black solid 2px;\n    color: black;\n}\n\n#addTaskButton:hover {\n\n    background-color: #e3e3e3;\n}\n\n#addTaskButton:active {\n\n    border: black solid 2px;\n    color: black;\n}\n\n#submitTaskButton:hover {\n\n    background-color: #e3e3e3;\n}\n\n#submitTaskButton:active {\n\n    border: black solid 2px;\n    color: black;\n}\n\n#sideBarActions {\n\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    justify-content: flex-start;\n    gap: 8px;\n}\n\n#sidebarContainer {\n\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    font-size: 1.25rem;\n    gap: 8px;\n}\n\n#sidebarContainer>button {\n\n    height: 1.5rem;\n    width: 15rem;\n    background-color: #f2f6ff;\n    border: #4d4d4d solid 2px;\n    color: #4d4d4d;\n}\n\n#sidebarContainer>button:hover {\n\n    background-color: #e3e3e3;\n}\n\n#sidebarContainer>button:active {\n\n    border: black solid 2px;\n    color: black;\n}\n\n#taskTab {\n\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n#tabHeader {\n\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    padding: 8px;\n    border: 2px solid transparent;\n    background-image: linear-gradient(to right, transparent, transparent), linear-gradient(to bottom, transparent, transparent), linear-gradient(to left, #f5f7f9, #4d4d4d), linear-gradient(to bottom, transparent, transparent);\n    background-origin: border-box;\n    background-size: 100% 2px, 2px 100%, 100% 2px, 2px 100%;\n    background-position: top left, top right, bottom right, bottom left;\n    background-repeat: no-repeat;\n}\n\n#taskContainer {\n\n    display: flex;\n    flex-direction: column;\n    gap: 4px;\n}\n\n.taskBox {\n\n    display: grid;\n    grid-template-columns: 1fr 12rem 9rem;\n    grid-template-rows: 2.5rem 1fr;\n    margin: 0 3rem;\n    padding: 8px 8px;\n    border: 2px solid transparent;\n    background-image: linear-gradient(to right, #f5f7f9, #f5f7f9), linear-gradient(to bottom, #f5f7f9, #f5f7f9), linear-gradient(to left, #f5f7f9, #4d4d4d), linear-gradient(to bottom, #f5f7f9, #f5f7f9);\n    background-origin: border-box;\n    background-size: 100% 2px, 2px 100%, 100% 2px, 2px 100%;\n    background-position: top left, top right, bottom right, bottom left;\n    background-repeat: no-repeat;\n    gap: 8px;\n}\n\n.taskBox:hover {\n\n    background-color: #d8dde2;\n}\n\n#listName {\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 2.5rem;\n}\n\n.taskTitle {\n\n    font-size: 2rem;\n    grid-column: 1 / 2;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-end;\n}\n\n.taskSummary {\n    \n    font-size: 1.5rem;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-start;\n    grid-column: 1 / 4;\n    grid-row: 2 / 3;\n    overflow: hidden;\n    border: #4d4d4d solid 2px;\n    padding: 4px 8px;\n    height: 2rem;\n}\n\n.fullSummary {\n    \n    font-size: 1.5rem;\n    display: flex;\n    justify-content: flex-start;\n    align-items: flex-start;\n    grid-column: 1 / 4;\n    grid-row: 2 / 3;\n    border: #4d4d4d solid 2px;\n    padding: 4px 8px;\n}\n\n.taskPriority {\n\n    grid-column: 3 / 4;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n}\n\n.dueDate {\n\n    display: flex;\n    grid-column: 2 / 3;\n    grid-row: 1 / 2;\n    justify-content: flex-end;\n    align-items: flex-end;\n}\n\n#userGreeting {\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-size: 5rem;\n    height: calc(100vh - 250px);\n}\n\n#projectName {\n\n    box-sizing: border-box;\n    height: 1.5rem;\n    width: 15rem;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#taskForm {\n\n    display: grid;\n    grid-template-columns: 50% 1fr 4.5rem 9rem 4.5rem 9rem;\n    grid-template-rows: 2.5rem 1fr;\n    gap: 8px;\n    padding: 1rem 3rem;\n}\n\n#inputName {\n\n    grid-column: 1 / 2;\n    grid-row: 1 / 2;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#labelDue {\n\n    grid-column: 3 / 4;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n}\n\n#inputDue {\n\n    grid-column: 4 / 5;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#labelPriority {\n\n    grid-column: 5 / 6;\n    grid-row: 1 / 2;\n    display: flex;\n    justify-content: flex-end;\n    align-items: flex-end;\n}\n\n#inputPriority {\n\n    grid-column: 6 / 7;\n    grid-row: 1 / 2;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#priorityLevels {\n\n    grid-column: 6 / 7;\n    grid-row: 1 / 2;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n}\n\n#inputSummary {\n\n    grid-column: 1 / 7;\n    grid-row: 2 / 3;\n    border: #4d4d4d solid 2px;\n    align-items: center;\n    justify-content: center;\n    color: #4d4d4d;\n    height: clamp(15rem, 50vh, 35rem);\n}\n\ntextarea {\n\n    resize: none;\n}"],sourceRoot:""}]);const d=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,a,i){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(o[s]=!0)}for(var u=0;u<t.length;u++){var c=[].concat(t[u]);r&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},o=[],d=0;d<t.length;d++){var s=t[d],u=r.base?s[0]+r.base:s[0],c=i[u]||0,l="".concat(u," ").concat(c);i[u]=c+1;var A=n(l),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var f=a(m,r);r.byIndex=d,e.splice(d,0,{identifier:l,updater:f,references:1})}o.push(l)}return o}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var i=r(t=t||[],a=a||{});return function(t){t=t||[];for(var o=0;o<i.length;o++){var d=n(i[o]);e[d].references--}for(var s=r(t,a),u=0;u<i.length;u++){var c=n(i[u]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=s}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t=n(379),e=n.n(t),r=n(795),a=n.n(r),i=n(569),o=n.n(i),d=n(565),s=n.n(d),u=n(216),c=n.n(u),l=n(589),A=n.n(l),m=n(426),f={};function p(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function g(t){return p(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function h(t){p(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function b(t){if(p(1,arguments),!g(t)&&"number"!=typeof t)return!1;var e=h(t);return!isNaN(Number(e))}f.styleTagTransform=A(),f.setAttributes=s(),f.insert=o().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=c(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var B={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function C(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}const y={date:C({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:C({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:C({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var v={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function x(t){return function(e,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=a.width?String(a.width):i;r=t.formattingValues[o]||t.formattingValues[i]}else{var d=t.defaultWidth,s=a.width?String(a.width):t.defaultWidth;r=t.values[s]||t.values[d]}return r[t.argumentCallback?t.argumentCallback(e):e]}}const w={ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:x({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:x({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:x({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:x({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:x({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function I(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(a);if(!i)return null;var o,d=i[0],s=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],u=Array.isArray(s)?E(s,(function(t){return t.test(d)})):k(s,(function(t){return t.test(d)}));o=t.valueCallback?t.valueCallback(u):u,o=n.valueCallback?n.valueCallback(o):o;var c=e.slice(d.length);return{value:o,rest:c}}}function k(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function E(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}var T,D={ordinalNumber:(T={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(T.matchPattern);if(!n)return null;var r=n[0],a=t.match(T.parsePattern);if(!a)return null;var i=T.valueCallback?T.valueCallback(a[0]):a[0];i=e.valueCallback?e.valueCallback(i):i;var o=t.slice(r.length);return{value:i,rest:o}}),era:I({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:I({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:I({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:I({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:I({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const j={code:"en-US",formatDistance:function(t,e,n){var r,a=B[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:y,formatRelative:function(t,e,n,r){return v[t]},localize:w,match:D,options:{weekStartsOn:0,firstWeekContainsDate:1}};function M(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function P(t,e){p(2,arguments);var n=h(t).getTime(),r=M(e);return new Date(n+r)}function S(t,e){p(2,arguments);var n=M(e);return P(t,-n)}var N=864e5;function z(t){p(1,arguments);var e=1,n=h(t),r=n.getUTCDay(),a=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function U(t){p(1,arguments);var e=h(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=z(r),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=z(i);return e.getTime()>=a.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}function L(t){p(1,arguments);var e=U(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=z(n);return r}var Y=6048e5;function q(t,e){p(1,arguments);var n=e||{},r=n.locale,a=r&&r.options&&r.options.weekStartsOn,i=null==a?0:M(a),o=null==n.weekStartsOn?i:M(n.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=h(t),s=d.getUTCDay(),u=(s<o?7:0)+s-o;return d.setUTCDate(d.getUTCDate()-u),d.setUTCHours(0,0,0,0),d}function W(t,e){p(1,arguments);var n=h(t),r=n.getUTCFullYear(),a=e||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,d=null==o?1:M(o),s=null==a.firstWeekContainsDate?d:M(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(r+1,0,s),u.setUTCHours(0,0,0,0);var c=q(u,e),l=new Date(0);l.setUTCFullYear(r,0,s),l.setUTCHours(0,0,0,0);var A=q(l,e);return n.getTime()>=c.getTime()?r+1:n.getTime()>=A.getTime()?r:r-1}function O(t,e){p(1,arguments);var n=e||{},r=n.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:M(a),o=null==n.firstWeekContainsDate?i:M(n.firstWeekContainsDate),d=W(t,e),s=new Date(0);s.setUTCFullYear(d,0,o),s.setUTCHours(0,0,0,0);var u=q(s,e);return u}var H=6048e5;function F(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const Q=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return F("yy"===e?r%100:r,e.length)},G=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):F(n+1,2)},R=function(t,e){return F(t.getUTCDate(),e.length)},X=function(t,e){return F(t.getUTCHours()%12||12,e.length)},Z=function(t,e){return F(t.getUTCHours(),e.length)},J=function(t,e){return F(t.getUTCMinutes(),e.length)},$=function(t,e){return F(t.getUTCSeconds(),e.length)},_=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return F(Math.floor(r*Math.pow(10,n-3)),e.length)};var V={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return Q(t,e)},Y:function(t,e,n,r){var a=W(t,r),i=a>0?a:1-a;return"YY"===e?F(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):F(i,e.length)},R:function(t,e){return F(U(t),e.length)},u:function(t,e){return F(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return F(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return F(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return G(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return F(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=function(t,e){p(1,arguments);var n=h(t),r=q(n,e).getTime()-O(n,e).getTime();return Math.round(r/H)+1}(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):F(a,e.length)},I:function(t,e,n){var r=function(t){p(1,arguments);var e=h(t),n=z(e).getTime()-L(e).getTime();return Math.round(n/Y)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):F(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):R(t,e)},D:function(t,e,n){var r=function(t){p(1,arguments);var e=h(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),a=n-r;return Math.floor(a/N)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):F(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return F(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return F(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return F(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return X(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Z(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):F(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):F(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):J(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):$(t,e)},S:function(t,e){return _(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return tt(a);case"XXXX":case"XX":return et(a);default:return et(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return tt(a);case"xxxx":case"xx":return et(a);default:return et(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+K(a,":");default:return"GMT"+et(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+K(a,":");default:return"GMT"+et(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return F(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return F((r._originalDate||t).getTime(),e.length)}};function K(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=e||"";return n+String(a)+o+F(i,2)}function tt(t,e){return t%60==0?(t>0?"-":"+")+F(Math.abs(t)/60,2):et(t,e)}function et(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+F(Math.floor(a/60),2)+n+F(a%60,2)}const nt=V;function rt(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function at(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const it={p:at,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return rt(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",rt(a,e)).replace("{{time}}",at(i,e))}};function ot(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var dt=["D","DD"],st=["YY","YYYY"];function ut(t){return-1!==dt.indexOf(t)}function ct(t){return-1!==st.indexOf(t)}function lt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var At=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,mt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ft=/^'([^]*?)'?$/,pt=/''/g,gt=/[a-zA-Z]/;function ht(t,e,n){p(2,arguments);var r=String(e),a=n||{},i=a.locale||j,o=i.options&&i.options.firstWeekContainsDate,d=null==o?1:M(o),s=null==a.firstWeekContainsDate?d:M(a.firstWeekContainsDate);if(!(s>=1&&s<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=i.options&&i.options.weekStartsOn,c=null==u?0:M(u),l=null==a.weekStartsOn?c:M(a.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var A=h(t);if(!b(A))throw new RangeError("Invalid time value");var m=ot(A),f=S(A,m),g={firstWeekContainsDate:s,weekStartsOn:l,locale:i,_originalDate:A},B=r.match(mt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,it[e])(t,i.formatLong,g):t})).join("").match(At).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return bt(n);var o=nt[r];if(o)return!a.useAdditionalWeekYearTokens&&ct(n)&&lt(n,e,t),!a.useAdditionalDayOfYearTokens&&ut(n)&&lt(n,e,t),o(f,n,i.localize,g);if(r.match(gt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return B}function bt(t){return t.match(ft)[1].replace(pt,"'")}function Bt(t){const e=document.getElementById("content"),n=document.createElement("div");n.setAttribute("id","taskTab"),e.appendChild(n);const r=document.createElement("div");r.setAttribute("id","tabHeader"),n.appendChild(r);const a=document.createElement("div");a.setAttribute("id","listName"),a.textContent=t.projectName,a.classList.add(t.projectID),r.appendChild(a);const i=document.createElement("button");i.setAttribute("id","addTaskButton"),i.textContent="+ Add New Task",r.appendChild(i);const o=document.createElement("div");if(o.setAttribute("id","taskContainer"),n.appendChild(o),t.taskList.length>0)for(let e=0;e<t.taskList.length;e++)yt(t,e);i.addEventListener("click",(()=>{Ct(),function(t){const e=document.getElementById("content"),n=document.createElement("div");n.setAttribute("id","taskTab"),e.appendChild(n);const r=document.createElement("div");r.setAttribute("id","tabHeader"),n.appendChild(r);const a=document.createElement("div");a.setAttribute("id","listName"),a.textContent=t.projectName,a.classList.add(t.projectID),r.appendChild(a);const i=document.createElement("button");i.setAttribute("type","submit"),i.setAttribute("id","submitTaskButton"),i.textContent="Save Task",i.setAttribute("form","taskForm"),r.appendChild(i),function(){const t=document.getElementById("taskTab"),e=document.createElement("form");e.setAttribute("id","taskForm"),e.setAttribute("onsubmit","createTask(); return false"),t.appendChild(e);const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("id","inputName"),n.setAttribute("name","taskName"),n.setAttribute("maxlength","50"),n.setAttribute("placeholder","Task Title"),n.setAttribute("required",""),e.appendChild(n);const r=document.createElement("textarea");r.setAttribute("id","inputSummary"),r.setAttribute("name","taskSummary"),r.setAttribute("placeholder","Specifics for this task"),r.setAttribute("maxlength","2000"),e.appendChild(r);const a=document.createElement("label");a.setAttribute("for","inputDue"),a.setAttribute("id","labelDue"),a.textContent="Due Date: ";const i=document.createElement("input");i.setAttribute("type","date"),i.setAttribute("id","inputDue"),i.setAttribute("name","dueDate"),e.appendChild(a),e.appendChild(i);const o=document.createElement("label");o.setAttribute("for","inputPriority"),o.setAttribute("id","labelPriority"),o.textContent="Priority: ";const d=document.createElement("input");d.setAttribute("list","priorityLevels"),d.setAttribute("id","inputPriority"),d.setAttribute("name","priority");const s=document.createElement("datalist");s.setAttribute("id","priorityLevels");const u=document.createElement("option");u.setAttribute("value","Low");const c=document.createElement("option");c.setAttribute("value","Medium");const l=document.createElement("option");l.setAttribute("value","High");const A=document.createElement("option");A.setAttribute("value","Urgent"),e.appendChild(o),e.appendChild(d),e.appendChild(s),s.appendChild(u),s.appendChild(c),s.appendChild(l),s.appendChild(A)}()}(t)}))}function Ct(){const t=document.getElementById("content"),e=document.getElementById("taskTab"),n=document.getElementById("userGreeting");e?t.removeChild(e):t.removeChild(n)}function yt(t,e){const n=t.taskList[e],r=document.getElementById("taskContainer"),a=document.createElement("div");a.setAttribute("id",`${e}`),a.classList.add("taskBox");const i=document.createElement("div");i.textContent=n.title,i.classList.add("taskTitle"),a.appendChild(i);const o=document.createElement("div");o.textContent=`Due:  ${n.dueDate}`,o.classList.add("dueDate"),a.appendChild(o);const d=document.createElement("div");d.textContent=`${n.priority} Priority`,d.classList.add("taskPriority"),a.appendChild(d);const s=document.createElement("div");s.textContent=n.summary,s.classList.add("taskSummary"),a.appendChild(s),r.appendChild(a),a.addEventListener("click",(()=>{Ct(),function(t,e){const n=document.getElementById("content"),r=document.createElement("div");r.setAttribute("id","taskTab"),n.appendChild(r);const a=document.createElement("div");a.setAttribute("id","tabHeader"),r.appendChild(a);const i=document.createElement("div");i.setAttribute("id","listName"),i.textContent=t.projectName,i.classList.add(t.projectID),a.appendChild(i);const o=document.createElement("button");o.setAttribute("id","addTaskButton"),o.textContent="Edit Task",a.appendChild(o);const d=document.createElement("button");d.setAttribute("id","removeTaskButton"),d.textContent="Delete Task",a.appendChild(d),o.addEventListener("click",(()=>{Ct();const n=t.taskList[e].title,r=t.taskList[e].summary;let a=t.taskList[e].dueDate;a&&(a=ht(new Date(a),"yyyy-MM-dd"));const i=t.taskList[e].priority;!function(t,e,n,r,a,i){const o=document.getElementById("content"),d=document.createElement("div");d.setAttribute("id","taskTab"),o.appendChild(d);const s=document.createElement("div");s.setAttribute("id","tabHeader"),d.appendChild(s);const u=document.createElement("div");u.setAttribute("id","listName"),u.textContent=t.projectName,u.classList.add(t.projectID),s.appendChild(u);const c=document.createElement("button");c.setAttribute("type","submit"),c.setAttribute("id","submitTaskButton"),c.textContent="Save Task",c.setAttribute("form","taskForm"),s.appendChild(c);const l=document.getElementById("taskTab"),A=document.createElement("form");A.setAttribute("id","taskForm"),A.setAttribute("onsubmit","updateTask(); return false"),l.appendChild(A);const m=document.createElement("input");m.setAttribute("type","text"),m.setAttribute("id","inputName"),m.setAttribute("name","taskName"),m.setAttribute("maxlength","50"),m.setAttribute("value",n),m.setAttribute("required",""),m.classList.add(e),A.appendChild(m);const f=document.createElement("textarea");f.setAttribute("id","inputSummary"),f.setAttribute("name","taskSummary"),f.textContent=r,f.setAttribute("maxlength","2000"),A.appendChild(f);const p=document.createElement("label");p.setAttribute("for","inputDue"),p.setAttribute("id","labelDue"),p.textContent="Due Date: ";const g=document.createElement("input");g.setAttribute("type","date"),g.setAttribute("id","inputDue"),g.setAttribute("name","dueDate"),g.setAttribute("value",a),A.appendChild(p),A.appendChild(g);const h=document.createElement("label");h.setAttribute("for","inputPriority"),h.setAttribute("id","labelPriority"),h.textContent="Priority: ";const b=document.createElement("input");b.setAttribute("list","priorityLevels"),b.setAttribute("id","inputPriority"),b.setAttribute("value",i),b.setAttribute("name","priority");const B=document.createElement("datalist");B.setAttribute("id","priorityLevels");const C=document.createElement("option");C.setAttribute("value","Low");const y=document.createElement("option");y.setAttribute("value","Medium");const v=document.createElement("option");v.setAttribute("value","High");const x=document.createElement("option");x.setAttribute("value","Urgent"),A.appendChild(h),A.appendChild(b),A.appendChild(B),B.appendChild(C),B.appendChild(y),B.appendChild(v),B.appendChild(x)}(t,e,n,r,a,i)})),d.addEventListener("click",(()=>{t.removeTask(e),Ct(),Bt(t)})),function(t,e){const n=t.taskList[e],r=document.getElementById("taskTab"),a=document.createElement("div");a.setAttribute("id",`${e}`),a.classList.add("taskBox");const i=document.createElement("div");i.textContent=n.title,i.classList.add("taskTitle"),a.appendChild(i);const o=document.createElement("div");o.textContent=`Due:  ${n.dueDate}`,o.classList.add("dueDate"),a.appendChild(o);const d=document.createElement("div");d.textContent=`${n.priority} Priority`,d.classList.add("taskPriority"),a.appendChild(d);const s=document.createElement("div");s.textContent=n.summary,s.classList.add("fullSummary"),a.appendChild(s),r.appendChild(a)}(t,e)}(t,e)}))}function vt(t,e){p(2,arguments);var n=h(t),r=M(e);return isNaN(r)?new Date(NaN):r?(n.setDate(n.getDate()+r),n):n}window.createTask=function(){!function(){const t=wt(),e=It(),n=kt(),r=Et(),a=Tt();a.addTask(t,e,n,r),Ct(),Bt(a)}()},window.updateTask=function(){!function(){const t=wt(),e=It(),n=kt(),r=Et(),a=Tt(),i=document.getElementById("inputName").className;a.editTask(i,t,e,n,r),Ct(),Bt(a)}()};const xt=[];function wt(){return document.getElementById("inputName").value}function It(){return document.getElementById("inputSummary").value}function kt(){return document.getElementById("inputDue").value}function Et(){return document.getElementById("inputPriority").value}function Tt(){const t=document.getElementById("listName").className;for(let e=0;e<xt.length;e++)if(xt[e].projectID===t)return xt[e]}window.createProject=function(){const t=function(t){const e=[];return{projectName:t,projectID:`project${xt.length}`,taskList:e,addTask:function(t,n,r,a){a||(a="Low"),r&&(r=vt(new Date(r),1),r=ht(new Date(r),"EEE MMM d, yyyy"));const i={title:t,taskLoc:e.length,summary:n,dueDate:r,priority:a};e.push(i)},removeTask:function(t){e.splice(t,1)},editTask:function(t,n,r,a,i){const o=e[t];o.title=n,o.summary=r,a&&(a=vt(new Date(a),1),a=ht(new Date(a),"EEE MMM d, yyyy")),o.dueDate=a,o.priority=i}}}(document.getElementById("projectName").value);xt.push(t);const e=function(t){for(let e=0;e<xt.length;e++)if(xt[e].projectID===t.projectID)return e}(t);!function(t){const e=t,n=document.getElementById("sidebarContainer"),r=document.createElement("button");r.textContent=e.projectName,n.appendChild(r),r.addEventListener("click",(()=>{Ct(),Bt(t)}))}(xt[e]),function(){const t=document.getElementById("projectForm");document.getElementById("sidebarContainer").removeChild(t)}()},document.getElementById("addProjectButton").addEventListener("click",(()=>{!function(){const t=document.getElementById("sidebarContainer"),e=document.createElement("form");e.setAttribute("id","projectForm"),e.setAttribute("onsubmit","createProject(); return false");const n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("id","projectName"),n.setAttribute("name","projectName"),n.setAttribute("maxlength","30"),n.setAttribute("required",""),e.appendChild(n),t.appendChild(e)}()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,